package com.cshawn.leetcodes.sword;

/**
 * 青蛙跳台阶问题
 * 一只青蛙一次可以跳上1级台阶，也可以跳上2级台阶。求该青蛙跳上一个 n级的台阶总共有多少种跳法。
 * 答案需要取模 1e9+7（1000000007），如计算初始结果为：1000000008，请返回 1。
 * 示例 1：
 * 输入：n = 2
 * 输出：2
 *
 * 示例 2：
 * 输入：n = 7
 * 输出：21
 *
 * 示例 3：
 * 输入：n = 0
 * 输出：1
 * 提示：0 <= n <= 100
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/qing-wa-tiao-tai-jie-wen-ti-lcof
 * 著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
 * @author C.Shawn
 * @date 2020/11/19 17:54
 */
public class Sword_10_2 {
    /**
     * 此题为斐波那契数列的实际应用题，跳到n级台阶之前的最后一步，可以有两种方式：
     * 1. 跳到n-1阶，直接一步跳到第n阶，这种情况下方法数就相当于跳到第n-1阶的方法数，即有f(n)=f(n-1)种方法。
     * 2. 跳到n-2阶，然后一步跳两个台阶到第n阶；当然还可以一步一个台阶跳到第n-1个再跳到第n个台阶，
     * 但这种情况不就和第1种情况重复了吗，所以不考虑。那么，这种情形下方法数就相当于跳到第n-2阶的方法数，即有f(n)=f(n-2)种方法。
     * 综上可知，f(n)=f(n-1)+f(n-2)，也就是一个标准的斐波那契数列，不同的是初始值f(1) = 1, f(2) = 2
     * @param n 台阶数
     * @return 跳法总数
     */
    public int numWays(int n) {
        if (n < 0) {
            return -1;
        }
        if (n == 0) {
            return 1;
        }
        if (n < 3) {
            return n;
        }
        int n_2 = 1;
        int n_1 = 2;
        int fn = 0;
        int i = 3;
        while (i <= n) {
            fn = (n_2 + n_1) % 1000000007;
            n_2 = n_1;
            n_1 = fn;
            i++;
        }
        return fn;
    }
}
